<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.personalizedlearning.system.mapper.MessageMapper">

    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.personalizedlearning.system.entity.Message">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="sender_id" property="senderId" jdbcType="BIGINT"/>
        <result column="receiver_id" property="receiverId" jdbcType="BIGINT"/>
        <result column="subject" property="subject" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
        <result column="is_read" property="isRead" jdbcType="BOOLEAN"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 插入消息 -->
    <insert id="insert" parameterType="com.personalizedlearning.system.entity.Message">
        INSERT INTO messages (sender_id, receiver_id, subject, content, is_read)
        VALUES (#{senderId}, #{receiverId}, #{subject}, #{content}, #{isRead})
    </insert>

    <!-- 更新消息 -->
    <update id="update" parameterType="com.personalizedlearning.system.entity.Message">
        UPDATE messages
        SET sender_id = #{senderId},
            receiver_id = #{receiverId},
            subject = #{subject},
            content = #{content},
            is_read = #{isRead}
        WHERE id = #{id}
    </update>

    <!-- 删除消息 -->
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM messages WHERE id = #{id}
    </delete>

    <!-- 根据ID查询消息 -->
    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM messages WHERE id = #{id}
    </select>

    <!-- 查询所有消息 -->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT * FROM messages
    </select>

    <!-- 根据发送者ID查询消息 -->
    <select id="findBySenderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM messages WHERE sender_id = #{senderId}
    </select>

    <!-- 根据接收者ID查询消息 -->
    <select id="findByReceiverId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM messages WHERE receiver_id = #{receiverId}
    </select>

    <!-- 根据发送者和接收者ID查询消息 -->
    <select id="findBySenderAndReceiver" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages
        WHERE sender_id = #{senderId} AND receiver_id = #{receiverId}
        ORDER BY created_at DESC
    </select>

    <!-- 查询未读消息数量 -->
    <select id="countUnreadMessages" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM messages WHERE receiver_id = #{receiverId} AND is_read = FALSE
    </select>

    <!-- 将消息标记为已读 -->
    <update id="markAsRead" parameterType="java.lang.Long">
        UPDATE messages SET is_read = TRUE WHERE id = #{id}
    </update>

    <!-- 将所有消息标记为已读 -->
    <update id="markAllAsRead" parameterType="java.lang.Long">
        UPDATE messages SET is_read = TRUE WHERE receiver_id = #{receiverId}
    </update>

    <!-- 获取消息总数 -->
    <select id="getTotalMessages" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM messages
    </select>

    <!-- 获取发送消息总数 -->
    <select id="getSentMessagesCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM messages WHERE sender_id = #{userId}
    </select>

    <!-- 获取接收消息总数 -->
    <select id="getReceivedMessagesCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM messages WHERE receiver_id = #{userId}
    </select>

    <!-- 获取日期范围内的消息 -->
    <select id="findByDateRange" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
        ORDER BY created_at DESC
    </select>

    <!-- 查找指定用户之间的对话历史 -->
    <select id="findConversation" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages
        WHERE (sender_id = #{user1Id} AND receiver_id = #{user2Id})
           OR (sender_id = #{user2Id} AND receiver_id = #{user1Id})
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询用户的消息 -->
    <select id="findUserMessagesByPage" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages
        WHERE receiver_id = #{userId}
        ORDER BY created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 分页查询用户发送的消息 -->
    <select id="findUserSentMessagesByPage" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages
        WHERE sender_id = #{userId}
        ORDER BY created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 分页查询消息 -->
    <select id="findByPage" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM messages LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 查询消息总数 -->
    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM messages
    </select>
</mapper>