<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.personalizedlearning.system.mapper.ChatMessageMapper">

    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.personalizedlearning.system.entity.ChatMessage">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="sender_id" property="senderId" jdbcType="BIGINT"/>
        <result column="chat_id" property="chatId" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
        <result column="is_read" property="isRead" jdbcType="BOOLEAN"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 插入聊天消息 -->
    <insert id="insert" parameterType="com.personalizedlearning.system.entity.ChatMessage">
        INSERT INTO chat_messages (sender_id, chat_id, content, is_read)
        VALUES (#{senderId}, #{chatId}, #{content}, #{isRead})
    </insert>

    <!-- 更新聊天消息 -->
    <update id="update" parameterType="com.personalizedlearning.system.entity.ChatMessage">
        UPDATE chat_messages
        SET sender_id = #{senderId},
            chat_id = #{chatId},
            content = #{content},
            is_read = #{isRead}
        WHERE id = #{id}
    </update>

    <!-- 删除聊天消息 -->
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM chat_messages WHERE id = #{id}
    </delete>

    <!-- 根据ID查询聊天消息 -->
    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM chat_messages WHERE id = #{id}
    </select>

    <!-- 查询所有聊天消息 -->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT * FROM chat_messages
    </select>

    <!-- 根据发送者ID查询聊天消息 -->
    <select id="findBySenderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT * FROM chat_messages WHERE sender_id = #{senderId}
    </select>

    <!-- 根据聊天ID查询聊天消息 -->
    <select id="findByChatId" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT * FROM chat_messages WHERE chat_id = #{chatId} ORDER BY created_at ASC
    </select>

    <!-- 查询未读聊天消息数量 -->
    <select id="countUnreadChatMessages" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM chat_messages WHERE chat_id = #{chatId} AND is_read = FALSE
    </select>

    <!-- 将聊天消息标记为已读 -->
    <update id="markAsRead" parameterType="map">
        UPDATE chat_messages SET is_read = TRUE WHERE chat_id = #{chatId} AND sender_id != #{userId}
    </update>

    <!-- 获取聊天消息总数 -->
    <select id="getTotalChatMessages" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM chat_messages
    </select>

    <!-- 获取聊天总数 -->
    <select id="getTotalChats" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT chat_id) FROM chat_messages
    </select>

    <!-- 获取用户参与的聊天总数 -->
    <select id="getUserChatsCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT chat_id) FROM chat_messages WHERE sender_id = #{userId}
    </select>

    <!-- 获取日期范围内的聊天消息 -->
    <select id="findByDateRange" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM chat_messages
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
        ORDER BY created_at DESC
    </select>

    <!-- 获取最新聊天消息 -->
    <select id="findLatestMessages" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT * FROM chat_messages
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 分页查询聊天消息 -->
    <select id="findByPage" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM chat_messages LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 查询聊天消息总数 -->
    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM chat_messages
    </select>
</mapper>